See the Assessment Guide for information on how to interpret this report.

ASSESSMENT SUMMARY

Compilation:  PASSED
API:          PASSED

Findbugs:     PASSED
PMD:          FAILED (10 warnings)
Checkstyle:   FAILED (0 errors, 145 warnings)

Correctness:  25/27 tests passed
Memory:       8/8 tests passed
Timing:       42/42 tests passed

Aggregate score: 95.56%
[Compilation: 5%, API: 5%, Findbugs: 0%, PMD: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]

ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
6.7K Jun 22 09:14 KdTree.java
1.9K Jun 22 09:14 PointSET.java


********************************************************************************
*  COMPILING                                                                    
********************************************************************************


% javac PointSET.java
*-----------------------------------------------------------

% javac KdTree.java
*-----------------------------------------------------------


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
PointSET:

KdTree:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS                                       
********************************************************************************


% findbugs *.class
*-----------------------------------------------------------

================================================================


% checkstyle *.java
*-----------------------------------------------------------
[WARN] PointSET.java:15:21: '(' is preceded with whitespace. [MethodParamPad]
[WARN] PointSET.java:17:28: '(' is preceded with whitespace. [MethodParamPad]
[WARN] PointSET.java:19:21: '(' is preceded with whitespace. [MethodParamPad]
[WARN] PointSET.java:21:24: '(' is preceded with whitespace. [MethodParamPad]
[WARN] PointSET.java:22:57: '(' is preceded with whitespace. [MethodParamPad]
[WARN] PointSET.java:23:20: '(' is preceded with whitespace. [MethodParamPad]
[WARN] PointSET.java:26:29: '(' is preceded with whitespace. [MethodParamPad]
[WARN] PointSET.java:27:57: '(' is preceded with whitespace. [MethodParamPad]
[WARN] PointSET.java:28:32: '(' is preceded with whitespace. [MethodParamPad]
[WARN] PointSET.java:31:22: '(' is preceded with whitespace. [MethodParamPad]
[WARN] PointSET.java:37:36: '(' is preceded with whitespace. [MethodParamPad]
[WARN] PointSET.java:38:60: '(' is preceded with whitespace. [MethodParamPad]
[WARN] PointSET.java:40:46: '(' is preceded with whitespace. [MethodParamPad]
[WARN] PointSET.java:42:31: '(' is preceded with whitespace. [MethodParamPad]
[WARN] PointSET.java:43:33: '(' is preceded with whitespace. [MethodParamPad]
[WARN] PointSET.java:49:28: '(' is preceded with whitespace. [MethodParamPad]
[WARN] PointSET.java:50:57: '(' is preceded with whitespace. [MethodParamPad]
[WARN] PointSET.java:54:22: The local variable '_p' must start with a lowercase letter and use camelCase. [LocalVariableName]
[WARN] PointSET.java:55:38: '(' is preceded with whitespace. [MethodParamPad]
[WARN] PointSET.java:56:48: '(' is preceded with whitespace. [MethodParamPad]
[WARN] PointSET.java:63:29: '(' is preceded with whitespace. [MethodParamPad]
[WARN] KdTree.java:15:51: '(' is preceded with whitespace. [MethodParamPad]
[WARN] KdTree.java:19:11: '//' or '/*' is not followed by whitespace. [IllegalTokenText]
[WARN] KdTree.java:35:19: '(' is preceded with whitespace. [MethodParamPad]
[WARN] KdTree.java:40:28: '(' is preceded with whitespace. [MethodParamPad]
[WARN] KdTree.java:42:21: '(' is preceded with whitespace. [MethodParamPad]
[WARN] KdTree.java:44:25: '(' is preceded with whitespace. [MethodParamPad]
[WARN] KdTree.java:48:29: '(' is preceded with whitespace. [MethodParamPad]
[WARN] KdTree.java:51:24: '(' is preceded with whitespace. [MethodParamPad]
[WARN] KdTree.java:54:38: '(' is preceded with whitespace. [MethodParamPad]
[WARN] KdTree.java:54:43: '(' is preceded with whitespace. [MethodParamPad]
[WARN] KdTree.java:54:53: '(' is preceded with whitespace. [MethodParamPad]
[WARN] KdTree.java:55:42: '(' is preceded with whitespace. [MethodParamPad]
[WARN] KdTree.java:56:34: '(' is preceded with whitespace. [MethodParamPad]
[WARN] KdTree.java:58:38: '(' is preceded with whitespace. [MethodParamPad]
[WARN] KdTree.java:58:43: '(' is preceded with whitespace. [MethodParamPad]
[WARN] KdTree.java:58:53: '(' is preceded with whitespace. [MethodParamPad]
[WARN] KdTree.java:59:42: '(' is preceded with whitespace. [MethodParamPad]
[WARN] KdTree.java:60:34: '(' is preceded with whitespace. [MethodParamPad]
...
Checkstyle ends with 0 errors and 142 warnings.

% custom checkstyle checks for PointSET.java
*-----------------------------------------------------------
[WARN] PointSET.java:33:30: The numeric literal '0.01' appears to be unnecessary. [NumericLiteral]
Checkstyle ends with 0 errors and 1 warnings.

% custom checkstyle checks for KdTree.java
*-----------------------------------------------------------
[WARN] KdTree.java:137:65: You should not need to use the 'SET' data type in this program. [IllegalType]
[WARN] KdTree.java:152:9: You should not need to use the 'SET' data type in this program. [IllegalType]
Checkstyle ends with 0 errors and 2 warnings.


================================================================


% pmd *.java
*-----------------------------------------------------------
KdTree.java:32: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes. [FieldDeclarationsShouldBeAtStartOfClass]
KdTree.java:33: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes. [FieldDeclarationsShouldBeAtStartOfClass]
KdTree.java:67: Avoid throwing null pointer exceptions. [AvoidThrowingNullPointerException]
KdTree.java:88: Avoid throwing null pointer exceptions. [AvoidThrowingNullPointerException]
KdTree.java:150: Avoid throwing null pointer exceptions. [AvoidThrowingNullPointerException]
KdTree.java:190: Avoid throwing null pointer exceptions. [AvoidThrowingNullPointerException]
PointSET.java:22: Avoid throwing null pointer exceptions. [AvoidThrowingNullPointerException]
PointSET.java:27: Avoid throwing null pointer exceptions. [AvoidThrowingNullPointerException]
PointSET.java:38: Avoid throwing null pointer exceptions. [AvoidThrowingNullPointerException]
PointSET.java:50: Avoid throwing null pointer exceptions. [AvoidThrowingNullPointerException]
PMD ends with 10 warnings.


================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of PointSET
*-----------------------------------------------------------
Running 8 total tests.

A point in an m-by-m grid means that it is of the form (i/m, j/m),
where i and j are integers between 0 and m

Test 1: Test size() by inserting n random points
        (size may be less than n because of duplicates)
  * 100000 random points in a 100000-by-100000 grid
  * 100000 random points in a 10000-by-10000 grid
  * 100000 random points in a 1000-by-1000 grid
  * 100000 random points in a 100-by-100 grid
  * 100000 random points in a 10-by-10 grid
==> passed

Test 2: Test isEmpty() by checking for n = 0, 1, and 2 points
  * 0 points
    - student isEmpty()   = false
    - student size()      = 0
    - reference isEmpty() = true
    - reference size()    = 0
  * 1 point
  * 2 points
==> FAILED

Test 3: Insert n random points and check contains() for random query points
  * 100000 random points in a 100000-by-100000 grid
  * 100000 random points in a 10000-by-10000 grid
  * 100000 random points in a 1000-by-1000 grid
  * 100000 random points in a 100-by-100 grid
  * 100000 random points in a 10-by-10 grid
==> passed

Test 4: Insert n random points and check nearest() for random query points
  * 1000 random points in a 100000-by-100000 grid
  * 1000 random points in a 10000-by-10000 grid
  * 1000 random points in a 1000-by-1000 grid
  * 1000 random points in a 100-by-100 grid
  * 1000 random points in a 10-by-10 grid
==> passed

Test 5: Insert n random points and check range() for random query rectangles
  * 1000 random rectangles and points in a 100000-by-100000 grid
  * 1000 random rectangles and points in a 10000-by-10000 grid
  * 1000 random rectangles and points in a 1000-by-1000 grid
  * 1000 random rectangles and points in a 100-by-100 grid
  * 1000 random rectangles and points in a 10-by-10 grid
==> passed

Test 6: Intermixed sequence of calls to isEmpty(), size(), insert(),
        contains(), range(), and nearest() with probabilities
        p1, p2, p3, p4, p5, and p6, respectively
  * 10000 calls with random points in a 10000-by-10000 grid
    and probabilities 0.05, 0.05, 0.3, 0.2, 0.2, 0.2
  * 10000 calls with random points in a 1000-by-1000 grid
    and probabilities 0.05, 0.05, 0.3, 0.2, 0.2, 0.2
  * 10000 calls with random points in a 100-by-100 grid
    and probabilities 0.05, 0.05, 0.3, 0.2, 0.2, 0.2
  * 10000 calls with random points in a 10-by-10 grid
    and probabilities 0.05, 0.05, 0.3, 0.2, 0.2, 0.2
  * 10000 calls with random points in a 1-by-1 grid
    and probabilities 0.05, 0.05, 0.3, 0.2, 0.2, 0.2
==> passed

Test 7: Intermixed sequence of calls to isEmpty(), size(), insert(),
        contains(), range(), and nearest() with probabilities
        p1, p2, p3=0, p4, p5, and p6, respectively
        (data structure with 0 points)
  * 1000 calls with random points in a 1000-by-1000 grid
    and probabilities 0.5, 0.5, 0.0, 0.0, 0.0, 0.0
    - failed on trial 1 of 1000
    - student   isEmpty() = false
    - reference isEmpty() = true
  * 1000 calls with random points in a 1000-by-1000 grid
    and probabilities 0.2, 0.2, 0.0, 0.6, 0.0, 0.0
    - failed on trial 4 of 1000
    - student   isEmpty() = false
    - reference isEmpty() = true
  * 1000 calls with random points in a 1000-by-1000 grid
    and probabilities 0.2, 0.2, 0.0, 0.0, 0.6, 0.0
    - failed on trial 2 of 1000
    - student   isEmpty() = false
    - reference isEmpty() = true
  * 1000 calls with random points in a 1000-by-1000 grid
    and probabilities 0.2, 0.2, 0.0, 0.0, 0.0, 0.6
    - failed on trial 4 of 1000
    - student   isEmpty() = false
    - reference isEmpty() = true
  * 1000 calls with random points in a 1000-by-1000 grid
    and probabilities 0.2, 0.2, 0.0, 0.2, 0.2, 0.2
    - failed on trial 3 of 1000
    - student   isEmpty() = false
    - reference isEmpty() = true
==> FAILED

Test 8: Test whether two PointSET objects can be created at the same time
==> passed


Total: 6/8 tests passed!


================================================================
Testing correctness of KdTree
*-----------------------------------------------------------
In the tests below, we consider three classes of points and rectangles.

  * Non-degenerate points: no two points (or rectangles) share either an
                           x-coordinate or a y-coordinate

  * Distinct points:       no two points (or rectangles) share both an
                           x-coordinate and a y-coordinate

  * General points:        no restrictions on the x-coordinates or y-coordinates
                           of the points (or rectangles)

A point in an GRID-by-GRID grid means that it is of the form (i/GRID, j/GRID),
where i and j are integers between 0 and GRID

Running 19 total tests.

Test 1a: Insert n non-degenerate points and check size() after each insertion
  * 50000 random non-degenerate points in a 100000-by-100000 grid
  * 5000 random non-degenerate points in a 10000-by-10000 grid
  * 500 random non-degenerate points in a 1000-by-1000 grid
  * 50 random non-degenerate points in a 100-by-100 grid
  * 10 random non-degenerate points in a 10-by-10 grid
  * 1 random non-degenerate points in a 1-by-1 grid
==> passed

Test 1b: Insert n distinct points and check size() after each insertion
  * 100000 random distinct points in a 100000-by-100000 grid
  * 100000 random distinct points in a 10000-by-10000 grid
  * 100000 random distinct points in a 1000-by-1000 grid
  * 10000 random distinct points in a 100-by-100 grid
  * 100 random distinct points in a 10-by-10 grid
  * 1 random distinct points in a 1-by-1 grid
==> passed

Test 1c: Insert n general points and check size() after each insertion
  * 100000 random general points in a 100000-by-100000 grid
  * 100000 random general points in a 10000-by-10000 grid
  * 100000 random general points in a 1000-by-1000 grid
  * 100000 random general points in a 100-by-100 grid
  * 100000 random general points in a 10-by-10 grid
  * 10 random general points in a 1-by-1 grid
==> passed

Test 2: Test size() and isEmpty() for n = 0, 1, and 2 points
  * 0 points
  * 1 point
  * 2 points
==> passed

Test 3a: Insert n non-degenerate points and call contains() with random query points
  * 50000 random non-degenerate points in a 100000-by-100000 grid
  * 5000 random non-degenerate points in a 10000-by-10000 grid
  * 500 random non-degenerate points in a 1000-by-1000 grid
  * 50 random non-degenerate points in a 100-by-100 grid
  * 5 random non-degenerate points in a 10-by-10 grid
  * 1 random non-degenerate points in a 1-by-1 grid
==> passed

Test 3b: Insert n distinct points and call contains() with random query points
  * 100000 random distinct points in a 100000-by-100000 grid
  * 100000 random distinct points in a 10000-by-10000 grid
  * 100000 random distinct points in a 1000-by-1000 grid
  * 10000 random distinct points in a 100-by-100 grid
  * 100 random distinct points in a 10-by-10 grid
  * 1 random distinct points in a 1-by-1 grid
==> passed

Test 3c: Insert n general points and call contains() with random query points
  * 10000 random general points in a 1000-by-1000 grid
  * 10000 random general points in a 100-by-100 grid
  * 10000 random general points in a 10-by-10 grid
  * 10000 random general points in a 1-by-1 grid
==> passed

Test 4: Test whether two KdTree objects can be created at the same time
==> passed

Test 5a: Insert n non-degenerate points and call range() for n random query rectangles
  * 5000 random non-degenerate points and rectangles in a 100000-by-100000 grid
  * 5000 random non-degenerate points and rectangles in a 10000-by-10000 grid
  * 500 random non-degenerate points and rectangles in a 1000-by-1000 grid
  * 50 random non-degenerate points and rectangles in a 100-by-100 grid
  * 5 random non-degenerate points and rectangles in a 10-by-10 grid
==> passed

Test 5b: Insert n distinct points and call range() for n random query rectangles
  * 5000 random distinct points and rectangles in a 100000-by-100000 grid
  * 5000 random distinct points and rectangles in a 10000-by-10000 grid
  * 1000 random distinct points and rectangles in a 1000-by-1000 grid
  * 1000 random distinct points and rectangles in a 100-by-100 grid
  * 5 random distinct points and rectangles in a 10-by-10 grid
==> passed

Test 5c: Insert n general points and call range() for n random query rectangles
  * 5000 random general points and rectangles in a 10000-by-10000 grid
  * 5000 random general points and rectangles in a 1000-by-1000 grid
  * 5000 random general points and rectangles in a 100-by-100 grid
  * 5000 random general points and rectangles in a 10-by-10 grid
  * 5000 random general points and rectangles in a 1-by-1 grid
==> passed

Test 5d: Insert n points and call range() for tiny rectangles enclosing each point.
  * 4000 tiny rectangles and 4000 points in a 100000-by-100000 grid
  * 4000 tiny rectangles and 4000 points in a 10000-by-10000 grid
  * 4000 tiny rectangles and 4000 points in a 1000-by-1000 grid
  * 4000 tiny rectangles and 4000 points in a 100-by-100 grid
  * 4000 tiny rectangles and 4000 points in a 10-by-10 grid
==> passed

Test 6a: Insert n non-degenerate points and call nearest() with random query points
  * 50000 random non-degenerate points in a 100000-by-100000 grid
  * 5000 random non-degenerate points in a 10000-by-10000 grid
  * 500 random non-degenerate points in a 1000-by-1000 grid
  * 50 random non-degenerate points in a 100-by-100 grid
  * 5 random non-degenerate points in a 10-by-10 grid
==> passed

Test 6b: Insert n distinct points and call nearest() with random query points
  * 50000 random distinct points in a 100000-by-100000 grid
  * 10000 random distinct points in a 10000-by-10000 grid
  * 10000 random distinct points in a 1000-by-1000 grid
  * 5000 random distinct points in a 100-by-100 grid
  * 50 random distinct points in a 10-by-10 grid
==> passed

Test 6c: Insert n general points and call nearest() with random query points
  * 10000 random general points in a 1000-by-1000 grid
  * 10000 random general points in a 100-by-100 grid
  * 10000 random general points in a 10-by-10 grid
==> passed

Test 7a: Intermixed sequence of calls to insert(), isEmpty(), size(),
         contains(), range(), and nearest() with probabilities
         (p1, p2, p3, p4, p5, p6), respectively
  * 20000 calls with non-degenerate points in a 100000-by-100000 grid
     and probabilities (0.3, 0.05, 0.05, 0.1, 0.2, 0.2)
  * 20000 calls with non-degenerate points in a 10000-by-10000 grid
     and probabilities (0.3, 0.05, 0.05, 0.1, 0.2, 0.2)
  * 20000 calls with non-degenerate points in a 1000-by-1000 grid
     and probabilities (0.3, 0.05, 0.05, 0.1, 0.2, 0.2)
  * 20000 calls with non-degenerate points in a 100-by-100 grid
     and probabilities (0.3, 0.05, 0.05, 0.1, 0.2, 0.2)
  * 20000 calls with non-degenerate points in a 10-by-10 grid
     and probabilities (0.3, 0.05, 0.05, 0.1, 0.2, 0.2)
  * 20000 calls with non-degenerate points in a 1-by-1 grid
     and probabilities (0.3, 0.05, 0.05, 0.1, 0.2, 0.2)
==> passed

Test 7b: Intermixed sequence of calls to insert(), isEmpty(), size(),
         contains(), range(), and nearest() with probabilities
         (p1, p2, p3, p4, p5, p6), respectively
  * 20000 calls with distinct points in a 100000-by-100000 grid
     and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with distinct points in a 10000-by-10000 grid
     and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with distinct points in a 1000-by-1000 grid
     and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with distinct points in a 100-by-100 grid
     and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with distinct points in a 10-by-10 grid
     and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with distinct points in a 1-by-1 grid
     and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
==> passed

Test 7c: Intermixed sequence of calls to insert(), isEmpty(), size(),
         contains(), range(), and nearest() with probabilities
         (p1, p2, p3, p4, p5, p6), respectively
  * 20000 calls with general points in a 100000-by-100000 grid
     and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with general points in a 10000-by-10000 grid
     and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with general points in a 1000-by-1000 grid
     and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with general points in a 100-by-100 grid
     and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with general points in a 10-by-10 grid
     and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with general points in a 1-by-1 grid
     and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
==> passed

Test 8: Intermixed sequence of calls to insert(), isEmpty(), size(),
        contains(), range(), and nearest() with probabilities
        (p1=0, p2, p3, p4, p5, p6), respectively
        (data structure with 0 points)
  * 1000 calls with no points in a 1000-by-1000 grid
     and probabilities (0.0, 0.5, 0.5, 0.0, 0.0, 0.0)
  * 1000 calls with no points in a 1000-by-1000 grid
     and probabilities (0.0, 0.2, 0.2, 0.6, 0.0, 0.0)
  * 1000 calls with no points in a 1000-by-1000 grid
     and probabilities (0.0, 0.2, 0.2, 0.0, 0.6, 0.0)
  * 1000 calls with no points in a 1000-by-1000 grid
     and probabilities (0.0, 0.2, 0.2, 0.0, 0.0, 0.6)
  * 1000 calls with no points in a 1000-by-1000 grid
     and probabilities (0.0, 0.2, 0.2, 0.2, 0.2, 0.2)
==> passed


Total: 19/19 tests passed!


================================================================
********************************************************************************
*  MEMORY
********************************************************************************

Computing memory of Point2D
*-----------------------------------------------------------
Memory of Point2D object = 32 bytes
================================================================



Computing memory of RectHV
*-----------------------------------------------------------
Memory of RectHV object = 48 bytes
================================================================



Computing memory of KdTree
*-----------------------------------------------------------
Running 8 total tests.

Memory usage of a KdTree with n points (including Point2D and RectHV objects).
Maximum allowed memory is 312n + 192 bytes.

                 n       student (bytes)    reference (bytes)
--------------------------------------------------------------
=> passed        1          112                160
=> passed        2          192                288
=> passed        5          432                672
=> passed       10          832               1312
=> passed       25         2032               3232
=> passed      100         8032              12832
=> passed      400        32032              51232
=> passed      800        64032             102432
==> 8/8 tests passed

Total: 8/8 tests passed!

Estimated student   memory (bytes) = 80.00 n + 32.00  (R^2 = 1.000)
Estimated reference memory (bytes) = 128.00 n + 32.00  (R^2 = 1.000)
================================================================



********************************************************************************
*  TIMING                                                                  
********************************************************************************

Timing PointSET
*-----------------------------------------------------------
Running 14 total tests.


Inserting n points into a PointSET

               n      ops per second
----------------------------------------
=> passed   160000    1706301         
=> passed   320000    1834763         
=> passed   640000    1406657         
=> passed  1280000    1128194         
==> 4/4 tests passed

Performing contains() queries after inserting n points into a PointSET

               n      ops per second
----------------------------------------
=> passed   160000     450528         
=> passed   320000     484168         
=> passed   640000     399403         
=> passed  1280000     358831         
==> 4/4 tests passed

Performing range() queries after inserting n points into a PointSET

               n      ops per second
----------------------------------------
=> passed    10000       4474         
=> passed    20000       1861         
=> passed    40000        854         
==> 3/3 tests passed

Performing nearest() queries after inserting n points into a PointSET

               n      ops per second
----------------------------------------
=> passed    10000       4805         
=> passed    20000       2197         
=> passed    40000        996         
==> 3/3 tests passed

Total: 14/14 tests passed!


================================================================



Timing KdTree
*-----------------------------------------------------------
Running 28 total tests.


Inserting n points into a 2d tree. The table gives the average number of calls to methods
in RectHV and Point per call to insert().

                                                                                                Point2D
               n      ops per second       RectHV()           x()               y()             equals()
----------------------------------------------------------------------------------------------------------------
=> passed   160000    1081550               0.0              22.1              21.1              21.6         
=> passed   320000    1152699               0.0              22.5              21.5              22.0         
=> passed   640000     992929               0.0              24.0              23.0              23.5         
=> passed  1280000     924096               0.0              26.1              25.1              25.6         
==> 4/4 tests passed

Performing contains() queries after inserting n points into a 2d tree. The table gives
the average number of calls to methods in RectHV and Point per call to contain().

                                                                               Point2D
               n      ops per second       x()               y()               equals()
-----------------------------------------------------------------------------------------------
=> passed    10000     523989              18.5              17.5              18.0         
=> passed    20000     546980              19.7              18.7              19.2         
=> passed    40000     530145              21.8              20.8              21.3         
=> passed    80000     517622              22.0              21.0              21.5         
=> passed   160000     503019              23.2              22.2              22.7         
=> passed   320000     441970              25.0              24.0              24.5         
=> passed   640000     369282              25.7              24.7              25.2         
=> passed  1280000     336165              27.2              26.2              26.7         
==> 8/8 tests passed

Performing range() queries after inserting n points into a 2d tree. The table gives
the average number of calls to methods in RectHV and Point per call to range().

               n      ops per second       intersects()      contains()        x()               y()
---------------------------------------------------------------------------------------------------------------
=> passed    10000     218301              62.3              31.1             101.1              61.6         
=> passed    20000     221887              65.1              32.6             106.6              68.1         
=> passed    40000     196613              78.6              39.3             127.1              76.5         
=> passed    80000     169066              81.3              40.7             131.2              79.5         
=> passed   160000     157983              85.0              42.5             139.9              88.1         
=> passed   320000     162408              80.5              40.2             130.3              79.5         
=> passed   640000     129717              86.6              43.3             140.7              87.8         
=> passed  1280000     145165              94.1              47.0             150.9              88.6         
==> 8/8 tests passed

Performing nearest() queries after inserting n points into a 2d tree. The table gives
the average number of calls to methods in RectHV and Point per call to nearest().

                                         Point2D                 RectHV
               n      ops per second     distanceSquaredTo()     distanceSquaredTo()        x()               y()
------------------------------------------------------------------------------------------------------------------------
=> passed    10000   253588                  65.3                   40.5                   138.5             136.7         
=> passed    20000   270388                  72.0                   44.8                   152.6             150.9         
=> passed    40000   237427                  85.0                   53.1                   181.0             178.1         
=> passed    80000   225961                  87.0                   54.4                   183.7             182.8         
=> passed   160000   204615                  94.5                   59.3                   200.6             199.1         
=> passed   320000   193646                  98.8                   62.1                   209.6             207.1         
=> passed   640000   138092                 102.5                   64.4                   216.8             215.2         
=> passed  1280000   152684                 115.0                   72.4                   243.0             241.1         
==> 8/8 tests passed

Total: 28/28 tests passed!


================================================================


